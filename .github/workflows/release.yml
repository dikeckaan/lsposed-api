name: Release Build

on:
  push:
    branches: [ "hookhandle" ]
  workflow_dispatch:

permissions:
  contents: write  # Release oluşturmak için write izni gerekli

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    - name: Build with Gradle
      run: |
        echo 'org.gradle.caching=true' >> gradle.properties
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.vfs.watch=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        ./gradlew publishToMavenLocal
        ./gradlew --stop
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.maven_pgp_signingKey }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.maven_pgp_signingPassword }}

    - name: Archive Library
      run: |
        mkdir -p release
        cd ~/.m2/repository/
        zip -r $GITHUB_WORKSPACE/release/library.zip .
    
    - name: Get latest tag
      id: get_tag
      run: |
        git fetch --tags
        TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "Latest tag: $TAG"
        if [ -z "$TAG" ]; then
          TAG="0.0"  # Eğer hiç tag yoksa başlangıç değeri olarak 0.0 kullan
        fi
        VERSION=$(echo $TAG | awk -F. '{print $1"."$2+1}')
        echo "New version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Create new tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ env.version }} -m "Release ${{ env.version }}"
        git push origin ${{ env.version }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ env.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Library to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/library.zip
        asset_name: library.zip
        asset_content_type: application/zip
